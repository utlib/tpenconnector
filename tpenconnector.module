<?php
/**
 * hook_menu
 */
function tpenconnector_menu() {

  $items['tpenconnector/get_manifest'] = array(
    'title' => 'SharedCanvas manifest',
    'page callback' => 'tpenconnector_get_manifest',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tpenconnector.inc'
  );

  $items['islandora/object/%islandora_object/transcribe'] = array(
    'title' => 'Transcribe with T-PEN',
    'page callback' => 'tpenconnector_get_manifest',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'tpenconnector_access',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc',
    'weight' => 1
  );

  //master tpenconnector button at islandora collection page
 $items['islandora/object/%islandora_object/transcribe_master'] = array(
    'title' => 'Create Master T-PEN project',
    'page callback' => 'tpenconnector_get_manifest_master',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'tpenconnector_master_access',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc',
    'weight' => 2
  );

 //master tpenconnector button at menu tabs
  $items['islandora/object/%islandora_object/transcribe_master_create/from_menutab'] = array(
    'title' => 'Create Master T-PEN project',
    'page callback' => 'tpenconnector_get_manifest_master',
    'page arguments' => array(2,4),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'tpenconnector_master_create',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc',
    'weight' => 2
  );

 //master tpenconnector button at menu tabs
  $items['islandora/object/%islandora_object/transcribe_master_edit/from_menutab'] = array(
    'title' => 'Edit Master T-PEN project',
    'page callback' => 'tpenconnector_get_manifest_master',
    'page arguments' => array(2,4),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'tpenconnector_master_edit',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc',
    'weight' => 2
  );

  $items['islandora/object/%islandora_object/delete-tpen'] = array(
    'title' => 'Delete T-Pen project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpenconnector_delete',2),
    'access callback' => 'tpenconnector_access',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc'
  );

  $items['islandora/object/%islandora_object/delete-master-tpen'] = array(
    'title' => 'Delete Master T-Pen project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpenconnector_master_delete',2),
    'access callback' => 'tpenconnector_master_access',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc'
  );

 //share button in my projects page
 $items['islandora/object/%islandora_object/share'] = array(
    'title' => 'Share T-Pen project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpenconnector_share',2),
    'access callback' => 'tpenconnector_access',
    'access arguments' => array(2),
    'file' => 'includes/tpenconnector.inc'
  );

 //Edit button in shared with me page
 $items['tpen/sharedproject/%/edit'] = array(
    'title' => 'Edit shared T-Pen project',
    'page callback' => 'tpenconnector_edit_shared_project',
    'page arguments' => array(2),
    'file' => 'includes/tpenconnector.inc',
    'access arguments' => array('access content'),
 );

 //T-PEN SSO settings menu
 $items['admin/config/system/tpenconnector'] = array(
        'title' => 'Tpenconnector redirect settings',
        'description' => 'Redirect after login/logout settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tpenconnector_settings_form'),
        'access arguments' => array('tpenconnector administer'),
 );

  return $items;
}


/*
 * Implement hook_permission().
 */
function tpenconnector_permission() {
    return array(
        'tpenconnector administer' => array(
            'title' => t('Administer tpenconnector module'),
            'description' => t('Perform administration tasks for tpenconnector.'),
        ),
        'tpenconnector tpen administer' => array(
            'title' => t('T-PEN admin user'),
            'description' => t('Define as admin user for T-PEN.'),
        ),
    );
}


/**
 * Determines whether or not to show this modules tab.
 *
 * @global object $user
 *
 * @param FedoraObject $fedora_object
 *   A FedoraObject.
 *
 * @return bool
 *   Whether the user has access or not.
 */
function tpenconnector_access($fedora_object) {

  $parent_obj = $fedora_object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection');

  $parent_obj_pid = $parent_obj[0]['object']['value'];

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle','master_t_pen_projects')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_pid', 'value', $fedora_object->id, '=');


    $results = $query->execute();

  return in_array('islandora:bookCModel', $fedora_object->models) && ($parent_obj_pid === 'paleography:manuscripts') && user_is_logged_in() && count($results) > 0;
}

function tpenconnector_master_create($fedora_object) {

  require_once "includes/MasterTPENProjectContentType.inc";

  global $user;

  $roles = $user->roles;
  
  $parent_obj = $fedora_object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection');

  $parent_obj_pid = $parent_obj[0]['object']['value'];

  $uri = MasterTPENProjectContentType::check_existing_project($fedora_object->id);

  return in_array('islandora:bookCModel', $fedora_object->models) && ($parent_obj_pid === 'paleography:manuscripts') && user_is_logged_in() && (in_array('administrator', $roles) || in_array('paleography_admin', $roles)) && !$uri;
}

function tpenconnector_master_edit($fedora_object) {

  require_once "includes/MasterTPENProjectContentType.inc";

  global $user;

  $roles = $user->roles;

  $parent_obj = $fedora_object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection');

  $parent_obj_pid = $parent_obj[0]['object']['value'];

  $uri = MasterTPENProjectContentType::check_existing_project($fedora_object->id);

  return in_array('islandora:bookCModel', $fedora_object->models) && ($parent_obj_pid === 'paleography:manuscripts') && user_is_logged_in() && (in_array('administrator', $roles) || in_array('paleography_admin', $roles))  && $uri;
}

function tpenconnector_master_access($fedora_object) {
  global $user;

  $roles = $user->roles;
  
  $parent_obj = $fedora_object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection');

  $parent_obj_pid = $parent_obj[0]['object']['value'];

  return in_array('islandora:bookCModel', $fedora_object->models) && ($parent_obj_pid === 'paleography:manuscripts') && user_is_logged_in() && (in_array('administrator', $roles) || in_array('paleography_admin', $roles)) ;
}

function tpenconnector_theme_registry_alter(&$theme_registry) {
 $path = drupal_get_path('module', 'tpenconnector');
  $file = 'theme.inc';
  global $theme_path;

  if (isset($theme_registry['islandora_solr'])) {
    $theme_registry['islandora_solr']['file'] = $file;
    $theme_registry['islandora_solr']['template'] = 'islandora-solr-with-tpen';
    if (!file_exists($theme_path.'/templates/islandora-solr-with-tpen.tpl.php')) {
      $theme_registry['islandora_solr']['path'] = $path.'/theme';
      $theme_registry['islandora_solr']['theme path'] = $path.'/theme/';
     }
    $theme_registry['islandora_solr']['preprocess functions'][] = 'tpenconnector_preprocess_islandora_solr_with_tpen';
    $theme_registry['islandora_solr']['includes'][] = $path.'/theme/'.$file;
    $theme_registry['islandora_solr']['variables'] = array('results' => NULL,'elements' => array(),'pids' => array());
  }
    
  if (isset($theme_registry['islandora_basic_collection'])) {
    $theme_registry['islandora_basic_collection']['file'] = $file;
    $theme_registry['islandora_basic_collection']['pattern'] = 'islandora_basic_collection_with_tpen__';
    $theme_registry['islandora_basic_collection']['template'] = 'islandora-basic-collection-with-tpen';
    if (!file_exists($theme_path.'/templates/islandora-basic-collection-with-tpen.tpl.php')) {
      $theme_registry['islandora_basic_collection_grid']['path'] = $path.'/theme';
      $theme_registry['islandora_basic_collection_grid']['theme path'] = $path.'/theme/';
     }
    $theme_registry['islandora_basic_collection']['preprocess functions'][] = 'tpenconnector_preprocess_islandora_basic_collection_with_tpen';
    $theme_registry['islandora_basic_collection']['includes'][] = $path.'/theme/'.$file;
  }
  if (isset($theme_registry['islandora_basic_collection_grid'])) {
    $theme_registry['islandora_basic_collection_grid']['file'] = $file;
    $theme_registry['islandora_basic_collection_grid']['pattern'] = 'islandora_basic_collection_grid_with_tpen__';
    $theme_registry['islandora_basic_collection_grid']['template'] = 'islandora-basic-collection-grid-with-tpen';
    if (!file_exists($theme_path.'/templates/islandora-basic-collection-grid-with-tpen.tpl.php')) {
      $theme_registry['islandora_basic_collection_grid']['path'] = $path.'/theme';
      $theme_registry['islandora_basic_collection_grid']['theme path'] = $path.'/theme/';
    } 
    $theme_registry['islandora_basic_collection_grid']['preprocess functions'][] = 'tpenconnector_preprocess_islandora_basic_collection_grid_with_tpen';
    $theme_registry['islandora_basic_collection_grid']['includes'][] = $path.'/theme/'.$file;
  }
}



/**
 * ----------------------------
 * T-PEN SSO settings code start
 * ----------------------------
 */

/**
 * @param string $str
 * @param bool $isBinary whether to encrypt as binary or not. Default is: false
 * @return string Encrypted data
 */
function tpenconnector_encrypt($str, $isBinary = false)
{

    $iv = variable_get('tpenconnector_sso_iv'); #Same as in T-PEN JAVA code
    $key = variable_get('tpenconnector_sso_key'); #Same as in T-PEN JAVA code

    $str = $isBinary ? $str : utf8_decode($str);
    $td = mcrypt_module_open('rijndael-128', ' ', 'cbc', $iv);
    mcrypt_generic_init($td, $key, $iv);
    $encrypted = mcrypt_generic($td, $str);
    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);
    return $isBinary ? $encrypted : bin2hex($encrypted);
}

function tpenconnector_user_login($account) {

    if (variable_get('tpenconnector_redirect')==1) {

        global $user;
        $tp_username = $user->name;
        $tp_email = $user->mail;
        if(user_access('tpenconnector tpen administer')) { $tp_role = 1; } else { $tp_role = 0; }

        // Grab the previous page url before login
        $destination = drupal_get_destination();
        $destination = $destination['destination'];

        // if it is login page, redirect to the homepage,
        if ($destination=='user/login') {
            $redirect_uri = $GLOBALS['base_url'];
        }
        // else redirect to the previous page.
        else {
            $redirect_uri = $GLOBALS['base_url']."/".$destination;
        }

        $tpen_login_uri = variable_get('tpenconnector_destination_login');

        $data = array(
            "username"=> $tp_username,
            "email"=>$tp_email,
            "role"=>$tp_role,
            "redirect_uri"=> $redirect_uri
        );
        $string = http_build_query($data);

        $encrypted_string = tpenconnector_encrypt($string, $isBinary = false);

        // Redirect the user. We need to prevent the redirect from being cached.
        header('Cache-Control: max-age=0', TRUE);
        header('Expires: Sun, 09 Aug 1987 22:00:00 +0100', TRUE);
        header('Pragma: no-cache', TRUE);
        header('Location: '.$tpen_login_uri.'?'.$encrypted_string, TRUE, 302);
        exit;

    }
}


/**
 * Implements hook_user_logout().
 */
function tpenconnector_user_logout($account) {
    //if ((variable_get('tpenconnector_redirect')==1) && user_access('tpenconnector redirect user')) {
    if ((variable_get('tpenconnector_redirect')==1)) {
        $destination = &drupal_static(__FUNCTION__);
        $destination = token_replace(variable_get('tpenconnector_destination_logout', ''));
    }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function tpenconnector_drupal_goto_alter(&$path, &$options, &$http_response_code) {

    $destination = &drupal_static('tpenconnector_user_logout');

    if (!$path && $destination) {
        $options = array();
        $logout_message = variable_get('tpenconnector_logout_message', '');
        if (!empty($logout_message)) {
            $options['query'] = array('logout-message' => 1);
        }
        drupal_goto($destination, $options);
    }

}


/**
 * Implements hook_page_build().
 */
function tpenconnector_page_build(&$page) {
    // Set logout message.
    if (!empty($_GET['logout-message']) && !user_is_logged_in()) {
        //$logout_message = variable_get('tpenconnector_logout_message', '');
        $logout_message = 'Successfully logged out';
        drupal_set_message(check_plain($logout_message));
    }
    elseif (!empty($_GET['logout-message']) && user_is_logged_in()) {
        $destination = drupal_get_destination();
        $arg = arg();
        if (!empty($arg)) {
            $destination = implode('/', $arg);
        }
        drupal_goto($destination);
    }
}


/**
 * Settings form.
 */
function tpenconnector_settings_form() {

    $form = array();

    $form['tpenconnector_redirect'] = array(
        '#type' => 'checkbox',
        '#default_value' => variable_get('tpenconnector_redirect'),
        '#title' => t('Turn on T-PEN SSO'),
    );
    $form['tpenconnector_destination_login'] = array(
        '#type' => 'textfield',
        '#title' => t('User redirect destination after login'),
        '#description' => t('Enter the login destination of the T-PEN application. Ex. https://tpenurl/loginHook'),
        '#size' => 100,
        '#required' => TRUE,
        '#default_value' => variable_get('tpenconnector_destination_login'),
    );
    $form['tpenconnector_destination_logout'] = array(
        '#type' => 'textfield',
        '#title' => t('User redirect destination after logout'),
        '#description' => t('Enter the logout destination of the T-PEN application. Ex. https://tpenurl/logoutHook?redirect_uri=https://thisSiteUrl'),
        '#size' => 100,
        '#required' => TRUE,
        '#default_value' => variable_get('tpenconnector_destination_logout'),
    );

    $form['tpenconnector_sso_iv'] = array(
        '#type' => 'textfield',
        '#title' => t('T-PEN SSO IV'),
        '#description' => t('16 characters - this should be identical with the IV value in T-PEN Java code.'),
        '#size' => 20,
        '#required' => TRUE,
        '#default_value' => variable_get('tpenconnector_sso_iv'),
    );

    $form['tpenconnector_sso_key'] = array(
        '#type' => 'textfield',
        '#title' => t('T-PEN SSO Key'),
        '#description' => t('16 characters - this should be identical with the Key value in T-PEN Java code'),
        '#size' => 20,
        '#required' => TRUE,
        '#default_value' => variable_get('tpenconnector_sso_key'),
    );

    return system_settings_form($form);
}

/**
 * ----------------------------
 * T-PEN SSO settings code end
 * ----------------------------
 */